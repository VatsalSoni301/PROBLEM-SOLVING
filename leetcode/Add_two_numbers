/*
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example:

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.
*/
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        int carry=0,res=0,x=0;
        ListNode* head=NULL;
        ListNode* curr=NULL;
        ListNode* newcurr=NULL;
        
        while(l1!=NULL&&l2!=NULL)
        {
            x=l1->val+l2->val+carry;
            res=x%10;
            carry=x/10;
            if(head==NULL)
            {
                newcurr=(struct ListNode*)malloc(sizeof(ListNode));
                head=newcurr;
                curr=newcurr;
            }
            else
            {
                newcurr=(struct ListNode*)malloc(sizeof(ListNode));
                // head=newcurr;
                curr->next=newcurr;
                curr=newcurr;
            }
            newcurr->next=NULL;
            newcurr->val=res;
            l1=l1->next;
            l2=l2->next;
            
        }
        if(l2!=NULL)
        {
            while(l2!=NULL)
            {
                x=l2->val+carry;
                res=x%10;
            carry=x/10;
                if(head==NULL)
                {
                    newcurr=(struct ListNode*)malloc(sizeof(ListNode));
                    head=newcurr;
                    curr=newcurr;
                }
                else
                {
                    newcurr=(struct ListNode*)malloc(sizeof(ListNode));
                    // head=newcurr;
                    curr->next=newcurr;
                    curr=newcurr;
                }
                newcurr->next=NULL;
                newcurr->val=res;
                // l1=l1->next;
                l2=l2->next;
            }
        }
        else if(l1!=NULL)
        {
             while(l1!=NULL)
            {
                x=l1->val+carry;
                res=x%10;
            carry=x/10;
                if(head==NULL)
                {
                    newcurr=(struct ListNode*)malloc(sizeof(ListNode));
                    head=newcurr;
                    curr=newcurr;
                }
                else
                {
                    newcurr=(struct ListNode*)malloc(sizeof(ListNode));
                    // head=newcurr;
                    curr->next=newcurr;
                    curr=newcurr;
                }
                newcurr->next=NULL;
                newcurr->val=res;
                l1=l1->next;
                // l2=l2->next;
            }
        }
        
        if(carry!=0)
        {
                newcurr=(struct ListNode*)malloc(sizeof(ListNode));
                    // head=newcurr;
                curr->next=newcurr;
                curr=newcurr;
                newcurr->next=NULL;
                newcurr->val=carry;
        }
        
        
        return head;
        
        
    }
};





