/*
Given a 32-bit signed integer, reverse digits of an integer.

Example 1:

Input: 123
Output: 321
Example 2:

Input: -123
Output: -321
Example 3:

Input: 120
Output: 21
Note:
Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.

*/



class Solution {
public:
    int reverse(long long int x) {
        long long int p=abs(x);
        long long int sign=1,res=0;
        if(x<0)
        {
            sign=-1;
        }
        if(p>=2147483648&&sign==-1)
        {
            return 0;
        }
        if(x>=2147483647)
        {
            return 0;
        }
        while(p>0)
        {
            res=res*10+p%10;
            p=p/10;
        }
         if(res>=2147483648&&sign==-1)
        {
            return 0;
        }
        if(res>=2147483647)
        {
            return 0;
        }
        return res*sign;
    }
};
